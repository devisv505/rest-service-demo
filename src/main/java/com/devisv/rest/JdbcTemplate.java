package com.devisv.rest;

import org.flywaydb.core.internal.jdbc.JdbcUtils;
import org.flywaydb.core.internal.jdbc.RowMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * Collection of utility methods for querying the DB.
 * Short version of {@link org.flywaydb.core.internal.jdbc.JdbcTemplate} with some modification
 * TODO: This version not supported Transactions
 */
@Singleton
public class JdbcTemplate {

    private static final Logger LOGGER = LoggerFactory.getLogger(JdbcTemplate.class);

    /**
     * The type to assign to a null value.
     */
    private final int nullType;

    private final DataSource dataSource;

    @Inject
    public JdbcTemplate(DataSource dataSource) {
        this.dataSource = dataSource;
        nullType = Types.NULL;
    }

    /**
     * Executes this query and map the results using this row mapper.
     *
     * @param query     The query to execute.
     * @param params    The List of parameters for query
     * @param rowMapper The row mapper to use.
     * @param <T>       The type of the result objects.
     * @return The list of results.
     * @throws SQLException when the query failed to execute.
     */
    public <T> List<T> query(String query, Object[] params, RowMapper<T> rowMapper) throws SQLException {

        LOGGER.debug("Start execute query [{}]", query);

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        List<T> results;
        try {
            connection = getConnection();
            statement = prepareStatement(connection, query, params);
            resultSet = statement.executeQuery();

            results = new ArrayList<>();
            while (resultSet.next()) {
                results.add(rowMapper.mapRow(resultSet));
            }
        } finally {
            closeResultSet(resultSet);
            closeStatement(statement);
            closeConnection(connection);
        }

        return results;
    }

    public <T> T querySingleRow(String query, Object[] params, RowMapper<T> rowMapper) throws SQLException {
        List<T> list = query(query, params, rowMapper);

        if (list.size() > 1) {
            throw new SQLException(
                    String.format("Query [%s] return more than one row", query)
            );
        }

        return list.size() == 1
                ? list.get(0)
                : null;
    }

    public void update(String query, Object... params) throws SQLException {
        execute(query, Statement.NO_GENERATED_KEYS, params);
    }

    public Long execute(String query, Object... params) throws SQLException {
        return execute(query, Statement.RETURN_GENERATED_KEYS, params);
    }

    /**
     * Executes Update or Insert with return ID as Long.
     *
     * @param query  The statement to execute.
     * @param params The statement parameters.
     * @throws SQLException when the execution failed.
     */
    private Long execute(String query, int autoGeneratedKeys, Object... params) throws SQLException {

        LOGGER.debug("Start execute query [{}]", query);

        PreparedStatement statement = null;
        Connection connection = null;
        try {
            connection = getConnection();

            statement = prepareStatement(connection, query, params, autoGeneratedKeys);
            statement.executeUpdate();

            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getLong(1);
                    } else {
                        throw new SQLException("Creating user failed, no ID obtained.");
                    }
                }
            }
        } finally {
            JdbcUtils.closeStatement(statement);
            JdbcUtils.closeConnection(connection);
        }

        return null;
    }

    public Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }

    private PreparedStatement prepareStatement(Connection connection,
                                               String sql,
                                               Object[] params) throws SQLException {
        return prepareStatement(connection, sql, params, Statement.NO_GENERATED_KEYS);
    }

    /**
     * Creates a new prepared statement for this sql with these params.
     *
     * @param sql    The sql to execute.
     * @param params The params.
     * @return The new prepared statement.
     * @throws SQLException when the statement could not be prepared.
     */
    private PreparedStatement prepareStatement(Connection connection,
                                               String sql,
                                               Object[] params,
                                               int autoGeneratedKeys) throws SQLException {
        PreparedStatement statement = connection.prepareStatement(sql, autoGeneratedKeys);
        for (int i = 0; i < params.length; i++) {
            if (params[i] == null) {
                statement.setNull(i + 1, nullType);
            } else if (params[i] instanceof Long) {
                statement.setLong(i + 1, (Long) params[i]);
            } else if (params[i] instanceof BigDecimal) {
                statement.setBigDecimal(i + 1, (BigDecimal) params[i]);
            } else if (params[i] instanceof Timestamp) {
                statement.setTimestamp(i + 1, (Timestamp) params[i]);
            } else if (params[i] instanceof Boolean) {
                statement.setBoolean(i + 1, (Boolean) params[i]);
            } else {
                statement.setString(i + 1, params[i].toString());
            }
        }
        return statement;
    }

    /**
     * Safely closes this statement. This method never fails.
     *
     * @param statement The statement to close.
     */
    public static void closeStatement(Statement statement) {
        if (statement == null) {
            return;
        }

        try {
            statement.close();
        } catch (SQLException e) {
            LOGGER.error("Error while closing JDBC statement", e);
        }
    }

    /**
     * Safely closes this resultSet. This method never fails.
     *
     * @param resultSet The resultSet to close.
     */
    public static void closeResultSet(ResultSet resultSet) {
        if (resultSet == null) {
            return;
        }

        try {
            resultSet.close();
        } catch (SQLException e) {
            LOGGER.error("Error while closing JDBC resultSet", e);
        }
    }

    /**
     * Safely closes this connection. This method never fails.
     *
     * @param connection The connection to close.
     */
    public static void closeConnection(Connection connection) {
        if (connection == null) {
            return;
        }

        try {
            connection.close();
        } catch (SQLException e) {
            LOGGER.error("Error while closing JDBC connection", e);
        }
    }

}
